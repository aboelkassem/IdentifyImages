@using BlazorClient.Data
@inject ImageClassificationService ClassificationService

<div class="card mb-2">
    <div class="card-header">
        @Image.Name
    </div>

    @if (Image.Base64Image != null)
    {
        <img src="data:image/png;base64, @Image.Base64Image" class="card-img-top" alt="@Image.Name">
    }

    <div class="card-body">
        @if (Image.ClassificationResult != null)
        {
            <p class="card-text">
                @if (Image.ClassificationResult.Probability > 0.7)
                {
                    <i class="text-success oi oi-circle-check"></i>
                }
                else
                {
                    <i class="text-danger oi oi-warning"></i>
                }
                Classified as <strong>@Image.ClassificationResult.Label</strong> with <strong>@Image.ClassificationResult.Probability</strong> probability
            </p>
            <p class="card-text">
                <button class="btn btn-secondary" @onclick="TriggerOnClear"><span class="oi oi-circle-x"></span> Clear</button>
            </p>
        }
        else
        {
            <p class="card-text text-center my-2">
                <div class="loader-icon">Loading...</div>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @Image.UploadedPercentage%" aria-valuenow="@Image.UploadedPercentage" aria-valuemin="0" aria-valuemax="100" />
                </div>
            </p>
        }
    </div>
</div>

@code {
    // See Component parameters: https://docs.microsoft.com/en-us/aspnet/core/blazor/components?view=aspnetcore-3.1#component-parameters
    [Parameter]
    public SelectedImage Image { get; set; }

    // See parent-child component event callbacks: https://docs.microsoft.com/en-us/aspnet/core/blazor/components?view=aspnetcore-3.1#eventcallback
    [Parameter]
    public EventCallback<SelectedImage> OnClear { get; set; }

    // See component Lifecycle methods: https://docs.microsoft.com/en-us/aspnet/core/blazor/lifecycle?view=aspnetcore-3.1
    protected override async Task OnInitializedAsync()
    {
        // avoid re-running classification in case Blazor recreates components
        // which I've noticed when removing elements from a list as in the case of the list of images in the parent page
        if (Image.ClassificationResult != null) return;

        // Download File contents into a memory stream, so we can hand it over to the ML.NET service
        // Invoke StateHasChanged as data is read, so the upload percentage is updated in the UX
        using (var fileStream = await Image.Upload(() => InvokeAsync(StateHasChanged)))
        {
            Image.ClassificationResult = ClassificationService.Classify(fileStream);
        }
    }

    async Task TriggerOnClear()
    {
        // Trigger parent component callback
        await OnClear.InvokeAsync(Image);
    }
}